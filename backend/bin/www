#!/usr/bin/env node

/**
 * Module dependencies.
 */
import http from 'http';
import debugModule from 'debug';
import { Server } from 'socket.io';
import app from '../app.js';
// import setupSocket from '../src/sockets/index.js';

const debug = debugModule('backend:server');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Set up Socket.IO
 */
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST'],
    credentials: true,
  },
});

// **Socket.IO Logic**
io.on('connection', (socket) => {
  console.log(`User connected: ${socket.id}`);

  // Handle joining a specific canvas room
  socket.on('joinRoom', (canvasId) => {
    socket.join(canvasId);
    console.log(`User ${socket.id} joined room: ${canvasId}`);
    socket.to(canvasId).emit('userJoined', socket.id);
  });

  // Handle chat messages
  socket.on('chatMessage', (data) => {
    const { canvasId, sender, message } = data;
    const timestamp = new Date().toLocaleTimeString();
    const fullMessage = {
      sender,
      message,
      timestamp,
    };
    io.to(canvasId).emit('chatMessage', fullMessage);
  });

  socket.on('disconnect', () => {
    console.log(`User disconnected: ${socket.id}`);
  });
});

// setupSocket(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val; // named pipe
  }

  if (port >= 0) {
    return port; // port number
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  if (typeof addr === 'string') {
    console.log(`Server listening on ${addr}`);
  } else if (addr && typeof addr.port === 'number') {
    console.log(`Server listening on port ${addr.port}`);
  }
}
